openapi: 3.0.3
info:
  title: Bablo app API.
  version: 1.0.0
servers:
  - url: https://babloapp.com
    description: Main (production) server
  - url: http://localhost:5001
    description: Localhost dev server
paths:
  /users/register:
    post:
      operationId: userRegister
      summary: Registers a new user
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: myusername
                password:
                  type: string
                  example: password
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithToken'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Missing username or password
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Username already taken
  /users/login:
    post:
      operationId: userLogin
      summary: Logins an existing user
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: username
                password:
                  type: string
                  example: password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithToken'
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid username or password
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Missing username or password
  /banks/accounts:
    get:
      summary: List user banks and accounts
      operationId: getUserAccounts
      description: Retrieves a list of all accounts for the user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation. Returns a list of banks and their associated accounts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  banks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Bank'
                    minItems: 0
        '401':
          description: Unauthorized. The user is not authenticated.
        '500':
          description: Internal server error. An unexpected error occurred on the server.
  /transactions/account:
    get:
      summary: Retrieves transactions for an account with cursor-based pagination and filtering.
      operationId: getAccountTransactions
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          required: true
          in: query
          description: The ID of the account to retrieve transactions for
          schema:
            type: string
        - name: limit
          required: false
          in: query
          description: Maximum number of transactions to return (default 50)
          schema:
            type: integer
            default: 50
        - name: cursor
          required: false
          in: query
          description: Pagination cursor in format "date:id" for fetching next page
          schema:
            type: string
        - name: category
          required: false
          in: query
          description: Filter transactions by personal finance category
          schema:
            type: string
        - name: startDate
          required: false
          in: query
          description: Filter transactions on or after this date (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: endDate
          required: false
          in: query
          description: Filter transactions on or before this date (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: search
          required: false
          in: query
          description: Search term to filter transaction name or merchant name
          schema:
            type: string
      responses:
        '200':
          description: Transactions and pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                    minItems: 0
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
  /transactions/item:
    get:
      summary: Retrieves transactions for an item with cursor-based pagination and filtering.
      operationId: getItemTransactions
      security:
        - bearerAuth: []
      parameters:
        - name: itemId
          required: true
          in: query
          description: The ID of the item to retrieve transactions for
          schema:
            type: string
        - name: limit
          required: false
          in: query
          description: Maximum number of transactions to return (default 50)
          schema:
            type: integer
            default: 50
        - name: cursor
          required: false
          in: query
          description: Pagination cursor in format "date:id" for fetching next page
          schema:
            type: string
        - name: category
          required: false
          in: query
          description: Filter transactions by personal finance category
          schema:
            type: string
        - name: startDate
          required: false
          in: query
          description: Filter transactions on or after this date (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: endDate
          required: false
          in: query
          description: Filter transactions on or before this date (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: search
          required: false
          in: query
          description: Search term to filter transaction name or merchant name
          schema:
            type: string
      responses:
        '200':
          description: Transactions and pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                    minItems: 0
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
  /transactions/recent:
    get:
      summary: Retrieves recent transactions with cursor-based pagination and filtering.
      operationId: getRecentTransactions
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          required: false
          in: query
          description: Maximum number of transactions to return (default 10)
          schema:
            type: integer
            default: 10
        - name: cursor
          required: false
          in: query
          description: Pagination cursor in format "date:id" for fetching next page
          schema:
            type: string
        - name: category
          required: false
          in: query
          description: Filter transactions by personal finance category
          schema:
            type: string
        - name: startDate
          required: false
          in: query
          description: Filter transactions on or after this date (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: endDate
          required: false
          in: query
          description: Filter transactions on or before this date (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: search
          required: false
          in: query
          description: Search term to filter transaction name or merchant name
          schema:
            type: string
      responses:
        '200':
          description: Transactions and pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                    minItems: 0
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
  /transactions/all:
    get:
      summary: Retrieves all user transactions with cursor-based pagination and filtering.
      operationId: getAllTransactions
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          required: false
          in: query
          description: Maximum number of transactions to return (default 50)
          schema:
            type: integer
            default: 50
        - name: cursor
          required: false
          in: query
          description: Pagination cursor in format "date:id" for fetching next page
          schema:
            type: string
        - name: category
          required: false
          in: query
          description: Filter transactions by personal finance category
          schema:
            type: string
        - name: startDate
          required: false
          in: query
          description: Filter transactions on or after this date (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: endDate
          required: false
          in: query
          description: Filter transactions on or before this date (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: search
          required: false
          in: query
          description: Search term to filter transaction name or merchant name
          schema:
            type: string
      responses:
        '200':
          description: Transactions and pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                    minItems: 0
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized          
  /link-token:
    post:
      summary: Generates a Link token
      operationId: getLinkToken
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Link token response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkTokenResponse'
        '401':
          description: Unauthorized. The user is not authenticated.                
  /items:
    post:
      summary: Saves new Plaid Item.
      operationId: saveNewItem
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                institutionId:
                  type: string
                publicToken:
                  type: string
      responses:
        200:
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
  /items/{itemId}:
    delete:
      summary: Deletes a Plaid Item.
      operationId: deleteItem
      security:
        - bearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          description: ID of the item to delete
          schema:
            type: string
      responses:
        204:
          description: Item deleted successfully
        401:
          description: Unauthorized
        404:
          description: Item not found
  
  /items/accounts/{accountId}/hidden:
    put:
      summary: Updates the hidden status of an account.
      operationId: updateAccountHiddenStatus
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          description: ID of the account to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                hidden:
                  type: boolean
                  description: The new hidden status
              required:
                - hidden
      responses:
        200:
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Account not found
                
  /budget/totalBalance:
    get:
      summary: total balance of all accounts.
      operationId: getTotalBudget
      security:
        - bearerAuth: []
      responses:
        '200':
          description: An array of transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotalBalance'
 
        '401':
          description: Unauthorized    
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    UserWithToken:
      type: object
      required: [token, user]
      properties:
        token:
          type: string
          example: 25893ed5f97eb70587d1e04d7a9335d3c6e2065b4368590d9d55d0be1f75a009
          description: Authentication token (sensitive information)
        user:
          type: object
          required: [id, username]
          properties:
            id:
              type: string
              example: 11
            username:
              type: string
              example: username
    LinkTokenResponse:
      type: object
      required:
        - expiration
        - link_token
        - request_id
      properties:
        expiration:
          type: string
          format: date-time
        link_token:
          type: string
        request_id:
          type: string
    Item:
      type: object
      required:
        - id
        - plaid_institution_id
        - status
      properties:
        id:
          type: integer
          format: int64
        plaid_institution_id:
          type: string
        status:
          type: string
    Bank:
      type: object
      required:
        - id
        - bank_name
        - accounts
      properties:
        id:
          type: integer
          description: The unique identifier of the bank.
        bank_name:
          type: string
          description: The name of the bank.
        logo:
          type: string
          description: bank logo
        primary_color:
          type: string
          description: bank primary color
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'  # Reference the existing 'accounts' schema          
    Account:
      type: object
      required: [id, name, current_balance, iso_currency_code, type, updated_at]
      properties:
        id:
          type: integer
          description: Unique identifier for the account
        name:
          type: string
          description: User-defined name for the account
        mask:
          type: string
          description: Masked account number
        official_name:
          type: string
          description: Official name of the account provided by the financial institution (optional)
        current_balance:
          type: number
          description: Current balance of the account
        available_balance:
          type: number
          description: Available balance of the account (optional)
        iso_currency_code:
          type: string
          description: 3-letter ISO currency code
        unofficial_currency_code:
          type: string
          description: Unofficial currency code (optional)
        type:
          type: string
          description: Type of account (depository, investment, loan, credit)
        subtype:
          type: string
          description: Subtype of account (checking, savings, ira, 401k, student, mortgage, credit card, cd, money market)
        hidden:
          type: boolean
          description: Whether the account is hidden in the UI (not included in totals)
          default: false
        created_at:
          type: string
          format: date-time
          description: Date and time the account was created
        updated_at:
          type: string
          format: date-time
          description: Date and time the account was last updated
    Transaction:
      type: object
      required:
        - account_id
        - amount
        - iso_currency_code
        - date
        - name
        - payment_channel
        - transaction_id
        - pending      
      properties:
        id:
          type: integer
          format: int32
          description: The unique identifier of the transaction (auto-incremented).
        account_id:
          type: integer
          format: int32
          description: The ID of the associated account.
        user_id:
          type: integer
          format: int32
          description: The ID of the associated user.
        amount:
          type: number
          format: decimal
          description: The transaction amount.
        iso_currency_code:
          type: string
          description: The ISO-4217 currency code for the transaction.
        date:
          type: string
          format: date
          description: The date of the transaction (YYYY-MM-DD).
        authorized_date:
          type: string
          format: date
          description: The date the transaction was authorized (YYYY-MM-DD).
        name:
          type: string
          description: The legacy merchant name or transaction description.
        merchant_name:
          type: string
          description: The enriched merchant name.
        logo_url:
          type: string
          description: The URL of the merchant's logo.
        website:
          type: string
          description: The URL of the merchant's website.
        payment_channel:
          type: string
          description: The payment channel (online, in store, other).
        transaction_id:
          type: string
          description: The unique transaction ID.
        personal_finance_category:
          type: string
          description: The personal finance category of the transaction.
        personal_finance_subcategory:
          type: string
          description: The personal finance subcategory of the transaction.
        pending:
          type: boolean
          description: Indicates if the transaction is pending.
        pending_transaction_transaction_id:
          type: string
          description: The transaction ID of a related pending transaction.
        created_at:
          type: string
          format: date-time
          description: The timestamp when the transaction was created.
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the transaction was last updated.
    TotalBalance:
      type: object
      required:
        - balance
        - iso_currency_code
      properties:
        balance:
          type: number
          format: decimal
        iso_currency_code:
          type: string
    Pagination:
      type: object
      description: Cursor-based pagination metadata
      properties:
        totalCount:
          type: integer
          description: Total count of items matching the query
        limit:
          type: integer
          description: Number of items requested per page
        hasMore:
          type: boolean
          description: Whether there are more items available to fetch
        nextCursor:
          type: string
          description: Cursor to fetch the next page of results (format "date:id")
