# ./nginx/conf-prod/production.conf

# Define rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=login_limit:10m rate=5r/s;
limit_req_status 429;  # Return 429 Too Many Requests instead of default 503

# Define a variable to track rate limited requests
map $status $limit_exceeded {
    429     1;
    default 0;
}

# Custom log format for rate limiting
log_format ratelimit '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" "$request_time"';

server {
    listen 80;
    server_name _; # Use specific domain name if applicable

    # Redirect all HTTP to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2; # Added http2 for potential performance benefits
    server_name _; # Use specific domain name if applicable

    # Log rate-limited requests to a separate file
    # Ensure ./nginx/logs directory exists or adjust path
    access_log /var/log/nginx/ratelimit.log ratelimit if=$limit_exceeded;

    # SSL configuration
    ssl_certificate /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;

    # Modern SSL settings (example, adjust as needed)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off; # Let client and server negotiate best cipher
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d; # Example: 1 day
    ssl_session_tickets off; # Improve security (requires more TLS handshakes)
    # Add HSTS header for security (optional but recommended)
    # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # --- Locations ---

    # Rate limiting for API endpoints - allows burst of 20 requests
    location / {
        limit_req zone=api_limit burst=20 nodelay;

        proxy_pass http://server:5001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Will be 'https'
    }

    # Stricter rate limiting for authentication endpoints
    location ~ ^/(users/login|users/register) {
        limit_req zone=login_limit burst=10 nodelay;

        proxy_pass http://server:5001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Will be 'https'
    }

    # Grafana - accessible via https://<your-domain>/metrics
    location /metrics {
        limit_req zone=api_limit burst=20 nodelay;

        proxy_pass http://grafana:3000; # Ensure Grafana service name matches
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Will be 'https'
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Prefix /metrics;
        # Rewrite rule might be needed depending on Grafana subpath config
        # rewrite ^/metrics/(.*)$ /$1 break;
    }

    # Static files for .well-known
    location /.well-known/ {
        limit_req zone=api_limit burst=50 nodelay;

        proxy_pass http://server:5001/.well-known/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Will be 'https'
    }
}