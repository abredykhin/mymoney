/**
 * @file Defines custom Express middleware functions.
 */

const Boom = require('@hapi/boom');
const sessionQueries = require('../db/queries/sessions');
const userQueries = require('../db/queries/users');
const debug = require('debug')('middleware');

/**
 * A higher-order function that wraps an async callback to properly trigger the
 * Express error-handling middleware on errors.
 *
 * @param {Function} fn an async callback.
 * @returns {Function} an Express callback that resolves the wrapped async fn.
 */
const asyncWrapper = fn => (req, res, next) => {
  return Promise.resolve(fn(req, res, next)).catch(error => {
    const asyncWrapperDebug = debug.extend('asyncWrapper');
    asyncWrapperDebug('Caught an error!');

    if (error.isBoom) {
      asyncWrapperDebug('The error is boom. Sending it to client directly.');
      // Return the Boom error directly with its appropriate status code
      return res.status(error.output.statusCode).json(error.output.payload);
    } else {
      // Still log the error for debugging
      asyncWrapperDebug(
        'The error is not boom. Will wrap in boom and send to client as 500 error code.'
      );
      asyncWrapperDebug(error);
      // Create a Boom error with a 500 status code and a generic message
      const boomError = Boom.internal('Internal Server Error');
      return res
        .status(boomError.output.statusCode)
        .json(boomError.output.payload);
    }
  });
};

/**
 * A catch-all error handler that sends a formatted JSON response.
 * Uses Boom to set the status code and provide consistent formatting.
 *
 * If using multiple error handlers, this should be the last one.
 *
 * @param {Object} err a javascript Error object.
 * @param {Object} req the Express request object.
 * @param {Object} res the Express response object.
 * @param {Function} next the Express next callback.
 */
const errorHandler = (err, req, res, next) => {
  const errorHandlerDebug = debug.extend('errorHandler');

  errorHandlerDebug('Got an unhandled error!');
  let error = err;

  // handle errors from the Plaid api.
  if (error.name === 'PlaidError') {
    errorHandlerDebug('The error came fom Plaid.');
    error = new Boom(error.error_message, { statusCode: error.status_code });
  }

  // handle standard javascript errors.
  if (!error.isBoom) {
    errorHandlerDebug('Error is standard JS error');
    error = Boom.boomify(error);
  }

  // these are generated by Boom, so they're guaranteed to exist.
  const { statusCode, payload } = error.output;
  res.status(statusCode).json(payload);
};

const verifyToken = async (req, res, next) => {
  const verifyTokenDebug = debug.extend('verifyToken');

  verifyTokenDebug('Verifying token...');
  const authHeader = req.headers.authorization;

  if (typeof authHeader !== 'undefined') {
    verifyTokenDebug(`Auth header is present.`);
    const [header, token] = authHeader.split(' ');

    if (!(header && token)) {
      verifyTokenDebug(`But unable to split into header/token pair!`);
      return next(Boom.unauthorized('Token not found!'));
    }

    verifyTokenDebug('Looking up user by token');
    const userId = await sessionQueries.lookupToken(token);
    if (!userId) {
      return next(Boom.unauthorized('Token not found!'));
    }

    verifyTokenDebug(
      `Found user ${userId.user_id}. Now looking up full user info`
    );
    const user = await userQueries.retrieveUserById(userId.user_id);
    if (!user) {
      verifyTokenDebug('Weird, but full user info is not found.');
      return next(Boom.unauthorized('Token not found!'));
    }

    verifyTokenDebug('All good! Verification is complete.');
    req.token = token;
    req.user = user;
    req.userId = user.id;

    next();
  } else {
    debug('Auth header is missing.');
    return next(Boom.unauthorized('Token not found!'));
  }
};

module.exports = { asyncWrapper, errorHandler, verifyToken };
