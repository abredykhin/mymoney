const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const Boom = require('@hapi/boom');
const { createUser, retrieveUserByUsername } = require('../../db/queries');

let refreshTokens = [];

const registerUser = async (req, res) => {
  console.log('Registering new user.');
  try {
    const { username, password } = req.body;
    if (!(username && password)) {
      return res.status(400).send('All inputs are required');
    }

    // Checking if the user already exists
    const oldUser = await retrieveUserByUsername(username);
    if (oldUser) {
      return res.status(400).send('User Already Exist. Please Login');
    }

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);
    console.log('About to create a user!!');

    try {
      const user = await createUser(username, hashedPassword);
      console.log('Created user!!');

      const token = jwt.sign(
        { user_id: user._id, username: username },
        process.env.JWT_SECRET_KEY,
        {
          expiresIn: '1y',
        }
      );

      const refreshToken = jwt.sign(
        { user_id: user._id, username: username },
        process.env.JWT_SECRET_KEY
      );

      refreshTokens.push(refreshToken);

      return res.status(201).json({
        token: token,
        refresh: refreshToken,
      });
    } catch (err) {
      console.log(err);
      const error = Boom.boomify(err);

      // these are generated by Boom, so they're guaranteed to exist.
      const { statusCode, payload } = error.output;
      res.status(statusCode).json(payload);
    }
  } catch (err) {
    throw err;
  }
};

const loginUser = async (req, res) => {
  const { username, password } = req.body;
  if (!(username && password)) {
    return res.status(400).send('All inputs are required');
  }

  const user = await retrieveUserByUsername(username);
  if (user && (await bcrypt.compare(password, user.password))) {
    // Create token
    const token = jwt.sign(
      { user_id: user._id, username: username },
      process.env.JWT_SECRET_KEY,
      {
        expiresIn: '5min',
      }
    );

    const refreshToken = jwt.sign(
      { user_id: user._id, username: username },
      process.env.JWT_SECRET_KEY
    );

    refreshTokens.push(refreshToken);

    const userToReturn = {
      username: user.username,
    };

    // user
    return res.status(200).json({
      user: userToReturn,
      token: token,
      refresh: refreshToken,
    });
  }

  return res.status(400).send('Invalid Credentials');
};

module.exports = { registerUser, loginUser };
